{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js","mainPhoto.jpg"],"names":["Home","react_default","a","createElement","AppContainer","Row","Tile","color","PhotoTile","imgSrc","MainPhoto","styled","div","_templateObject","_templateObject2","p","css","_templateObject3","_templateObject4","_templateObject5","BoxSizingGlobalStyle","createGlobalStyle","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","className","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"kuCAIe,IAAAA,EAAA,WACX,OACIC,EAAAC,EAAAC,cAACC,EAAD,KACIH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACE,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,YACZN,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,YACZN,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,aAEhBN,EAAAC,EAAAC,cAACE,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,YACZN,EAAAC,EAAAC,cAACK,EAAD,CAAWD,MAAM,UAAUE,OAAQC,MACnCT,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,aAEhBN,EAAAC,EAAAC,cAACE,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,YACZN,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,YACZN,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MAAM,gBAQ1BH,EAAeO,IAAOC,IAAVC,KAWZP,EAAOK,IAAOC,IAAVE,IAQc,SAAAC,GAAC,OAAIA,EAAER,OACzB,SAAAQ,GAAC,OAAIA,EAAEN,OACHO,YADCC,IAEyBF,EAAEN,QAI5B,KAIJD,EAAYG,YAAOL,EAAPK,CAAHO,IAca,SAAAH,GAAC,OAAIA,EAAER,QAK7BF,EAAMM,IAAOC,IAAVO,qHC1EM,IASTC,EAAuBC,YAAHC,KCDNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cFFD,WACb,OACEF,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACH,EAAD,QEFU,MAAS+B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAA1B,EAAuB","file":"static/js/main.0699a05e.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport MainPhoto from './mainPhoto.jpg';\n\nexport default () => {\n    return (\n        <AppContainer>\n            <div>\n                <Row>\n                    <Tile color=\"#FCD4E4\" />\n                    <Tile color=\"#CFF6F4\" />\n                    <Tile color=\"#FFFCD7\" />\n                </Row>\n                <Row>\n                    <Tile color=\"#F4ADCA\" />\n                    <PhotoTile color=\"#9FE0DD\" imgSrc={MainPhoto} />\n                    <Tile color=\"#FFFAB5\" />\n                </Row>\n                <Row>\n                    <Tile color=\"#E593B4\" />\n                    <Tile color=\"#75B6B4\" />\n                    <Tile color=\"#FFF9A4\" />\n                </Row>\n            </div>\n        </AppContainer>\n    );\n}\n\n\nconst AppContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n\n    justify-content: center;\n    align-items: center;\n\n    height: 100vh;\n    width: 100vw;\n`;\n\nconst Tile = styled.div`\n    display: inline-block;\n\n    height: 150px;\n    width: 150px;\n\n    margin: 10px;\n\n    background-color: ${p => p.color};\n    ${p => p.imgSrc\n        ? css`\n            background-image: url(${p.imgSrc});\n            background-size: 290px;\n            background-position: 49% 31%;\n            `\n        : ''\n    }\n`;\n\nconst PhotoTile = styled(Tile)`\n    position: relative;\n\n    &:before {\n        position: absolute;\n        display: block;\n\n        top:0;\n        left:0;\n        width:100%;\n        height:100%;\n\n        content:\" \";\n\n        background-color: ${p => p.color};\n        opacity: 0.4;\n    }\n`;\n\nconst Row = styled.div``;","import React, { Component } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Home from './Home';\n\nexport default () => {\n  return (\n    <div className=\"App\">\n      <BoxSizingGlobalStyle />\n      <Home />\n    </div>\n  );\n}\n\nconst BoxSizingGlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mainPhoto.8b5825ac.jpg\";"],"sourceRoot":""}