{"version":3,"sources":["mainPhoto.jpg","combined.png","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","_useState","useState","_useState2","Object","slicedToArray","shouldAnimate","seShouldAnimate","react_default","a","createElement","AppContainer","Row","Tile","animationPosition","color","PhotoTile","onClick","setShouldAnimate","setTimeout","ANIMATION_DRUATION_SECONDS","handleClick","imgSrc","MainPhoto","AnimationContainer","WalkingAnimation","styled","div","_templateObject","rotationCurve","BezierEasing","scaleCurve","radiusCurve","radiusEasingFunc","step","rotateSteps","range","reduce","str","concat","rotationEasingFunc","scaleEasingFunc","photoShrinkRadiusSteps","photoShrinkRadius","keyframes","_templateObject2","rotate","_templateObject3","_templateObject4","css","_templateObject5","_templateObject6","_templateObject7","_templateObject8","spriteAnim","_templateObject9","fadeIn","_templateObject10","_templateObject11","_templateObject12","_templateObject13","SpriteSheet","_templateObject14","BoxSizingGlobalStyle","createGlobalStyle","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","className","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4db87e82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mainPhoto.8b5825ac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/combined.6a05929a.png\";","import React, { useState } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport MainPhoto from './mainPhoto.jpg';\nimport SpriteSheet from './combined.png';\n\nimport BezierEasing from 'bezier-easing';\nimport { range } from 'lodash';\nconst ANIMATION_DRUATION_SECONDS = 2;\nconst ANIMATION_DELAY_INTERVAL = 200;\nconst ROTATION_AMOUNT = 180;\n\nconst handleClick = (shouldAnimate, setShouldAnimate) => {\n    if (!shouldAnimate) {\n        setShouldAnimate(true);\n        setTimeout(() => setShouldAnimate(false), ANIMATION_DRUATION_SECONDS*1000 + 1050 + 5000);\n    }\n}\n\nexport default () => {\n    const [shouldAnimate, seShouldAnimate] = useState(false);\n\n    return (\n        <AppContainer>\n            <Row>\n                <Tile shouldAnimate={shouldAnimate} animationPosition={0} color=\"#FCD4E4\" />\n                <Tile shouldAnimate={shouldAnimate} animationPosition={1} color=\"#CFF6F4\" />\n                <Tile shouldAnimate={shouldAnimate} animationPosition={2} color=\"#FFFCD7\" />\n            </Row>\n            <Row>\n                <Tile shouldAnimate={shouldAnimate} animationPosition={1} color=\"#F4ADCA\" />\n                <PhotoTile shouldAnimate={shouldAnimate} animationPosition={2} onClick={() => handleClick(shouldAnimate, seShouldAnimate)} color=\"#9FE0DD\" imgSrc={MainPhoto}>\n                    <AnimationContainer shouldAnimate={shouldAnimate}>\n                        <WalkingAnimation />\n                    </AnimationContainer>\n                </PhotoTile>\n                <Tile shouldAnimate={shouldAnimate} animationPosition={3} color=\"#FFFAB5\" />\n            </Row>\n            <Row>\n                <Tile shouldAnimate={shouldAnimate} animationPosition={2} color=\"#E593B4\" />\n                <Tile shouldAnimate={shouldAnimate} animationPosition={3} color=\"#75B6B4\" />\n                <Tile shouldAnimate={shouldAnimate} animationPosition={4} color=\"#FFF9A4\" />\n            </Row>\n        </AppContainer>\n    );\n}\n\n\nconst AppContainer = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n\n    display: flex;\n    flex-direction: column;\n\n    white-space: nowrap;\n`;\n\nconst rotationCurve = BezierEasing(0.455, 0.03, 0.515, 0.955);\nconst rotationEasingFunc = (step) => rotationCurve(step/100)*ROTATION_AMOUNT;\n\nconst scaleCurve = BezierEasing(0.645, 0.045, 0.355, 1);\nconst scaleEasingFunc = (step) => {\n    // return 1;\n    // if (step < 50) {\n    //     return 1 - scaleCurve(step/100)\n    // } else {\n    //     return 1 - scaleCurve((100-step)/100)\n    // }\n\n    return 1 - scaleCurve(step/100)*.2\n}\n\nconst radiusCurve = BezierEasing(0.165, 0.84, 0.44, 1);\nconst radiusEasingFunc = (step) => radiusCurve(step/100)*50;\n\nconst rotateSteps =\n    range(1,101)\n    .reduce(\n        (str, step) => `\n        ${str}\n        ${step}% {\n            transform: rotate(${rotationEasingFunc(step)}deg) scale(${scaleEasingFunc(step)});\n            border-radius: ${radiusEasingFunc(step)}%;\n        }`, '');\n\nconst photoShrinkRadiusSteps =\nrange(1,101)\n.reduce(\n    (str, step) => `\n    ${str}\n    ${step}% {\n        border-radius: ${radiusEasingFunc(step)}%;\n    }`, '');\n\nconst photoShrinkRadius = keyframes`\n    ${photoShrinkRadiusSteps}\n`;\n\nconst rotate = keyframes`\n    ${rotateSteps}\n`;\n\nconst Tile = styled.div`\n    display: inline-block;\n\n    height: 150px;\n    width: 150px;\n\n    margin: 10px;\n\n    background-color: ${p => p.color};\n    ${p => p.imgSrc\n        ? css`\n            background-image: url(${p.imgSrc});\n            background-size: 290px;\n            background-position: 49% 31%;\n            `\n        : ''\n    }\n\n    ${p => p.shouldAnimate\n        ? css`animation: ${rotate} ${ANIMATION_DRUATION_SECONDS}s linear ${p.animationPosition * ANIMATION_DELAY_INTERVAL}ms forwards;`\n        : ''\n    }\n`;\n\nconst PhotoTile = styled(Tile)`\n    position: relative;\n\n    overflow: hidden;\n\n    &:hover {\n        cursor: pointer;\n    }\n\n    &:before {\n        position: absolute;\n        display: block;\n\n        top:0;\n        left:0;\n        width:100%;\n        height:100%;\n\n        content:\" \";\n\n        background-color: ${p => p.color};\n        opacity: 0.4;\n    }\n\n    ${p => p.shouldAnimate\n        ? css`animation: ${photoShrinkRadius} ${ANIMATION_DRUATION_SECONDS}s linear ${p.animationPosition * ANIMATION_DELAY_INTERVAL}ms forwards;`\n        : ''\n    }\n`;\n\nconst spriteAnim = keyframes`\n    from {\n        background-position-x: 0;\n    }\n\n    to {\n        background-position-x: -1650px;\n    }\n`;\n\nconst fadeIn = keyframes`\n    from {\n        opacity: 0;\n    }\n\n    to {\n        opacity: 1;\n    }\n`;\nconst AnimationContainer = styled.div`\n    opacity: 0;\n    ${\n        p => p.shouldAnimate\n            ? css`animation: ${fadeIn} 1s ease-in forwards;`\n            : ''\n    }\n`;\n\nconst WalkingAnimation = styled.div`\n    background-image: url(${SpriteSheet});\n    background-repeat: no-repeat;\n    background-size: cover;\n    width: 150px;\n    height: 150px;\n    animation: ${spriteAnim} 1s steps(11) infinite;\n`;\n\nconst Row = styled.div``;","import React, { Component } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Home from './Home';\n\nexport default () => {\n  return (\n    <div className=\"App\">\n      <BoxSizingGlobalStyle />\n      <Home />\n    </div>\n  );\n}\n\nconst BoxSizingGlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}